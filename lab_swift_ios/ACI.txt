import Foundation

class t_note_student{
    var note: [String: Int]
                //cheie: val
                //dictionar
    init(){
        note = [:]
        
    }

    init(_ materie: String, _ nota: Int){
        note = [materie: nota]
    }
    deinit{
        //destructor
        note = [:]
    }
    func add_update(_ materie: String, _ nota: Int){
        note[materie] = nota
    }
    func sterge(_ materie: String){
    note[materie] = nil
    }
    func tipareste(){
        
    print("Note = ")
        for (materie, nota) in note{
            print ("La materia \(materie) nota este \(nota)")
        }
    }
    func tipareste_restante(){
          print("Restanta = ")
        for (materie, nota) in note{
            if (nota < 5){
            print ("La materia \(materie) nota este \(nota)")
        }
    }
}
    func gaseste_nota(_ materie: String)->Int{
        let nota_opt = note[materie]
        //scoate din opt val acestuia, nota intreg
        if let nota = nota_opt{
            return nota
        }
        else {return -1}
    }
    
    //supraincarcare
    subscript(index : String)->Int{
        get{
             return gaseste_nota(index)
        }
        set(nota){
            note[index] = nota
        }
    }
    
    func get_media()->Float{
        var media = Float(0.0)
        for nota in note.values{
            media += Float(nota)
            
        }
        media /= Float(note.count)
        return media
        
    }
 } 
 
 
   //enumerare &case sensitive
enum t_test{
    case constructor_implicit
    case constructor_parametri
    case restante
    case sterge
    case gaseste_exista
    case gaseste_nu_exista
    case supraincarcare_subscript
}

let test_case = t_test.gaseste_nu_exista

switch(test_case){
    case .constructor_implicit:
        let x = t_note_student()
        x.add_update("citire",5)
        x.add_update("matematica",6)
        x.tipareste()
    case .constructor_parametri:
        let x = t_note_student("caligrafie",4)
        x.add_update("citire",5)
        x.add_update("matematica",6)
        x.tipareste()
    case .restante:
            let x = t_note_student("caligrafie",4)
            x.add_update("citire",5)
            x.add_update("matematica",6)
            x.tipareste_restante()
    case .sterge:
            let x = t_note_student("caligrafie",4)
            x.add_update("citire",5)
            x.add_update("matematica",6)
            x.sterge("caligrafie")
            x.tipareste()
    case .gaseste_exista:
            let x = t_note_student("caligrafie",4)
            x.add_update("citire",5)
            x.add_update("matematica",6)
            let materie = "citire"
            let nota = x.gaseste_nota(materie)
            if(nota != -1) {print ("La materia \(materie) este ")}
            else{
            print ( "nu avem nota la materia \(materie)")}
           
    case .gaseste_nu_exista:  let x = t_note_student("caligrafie",4)
            x.add_update("citire",5)
            x.add_update("matematica",6)
            let materie = "citire"
            let nota = x.gaseste_nota(materie)
            if(nota != -1) {print ("La materia \(materie) este ")}
            else{
            print ( "nu avem nota la materia \(materie)")}
     
     case .supraincarcare_subscript:
            let x = t_note_student()
            x["citire"] = 5
            x.tipareste()
            
    case .medie:
            let x = t_note_student()
            x.tipareste()
            
}




